You are an expert full‑stack developer. Generate a complete, local‑only starter project in JavaScript (no TypeScript) that meets these requirements. Organize output in two folders, `/web` and `/mobile`, and include all commands and boilerplate code.

---  
1. SETUP WEB APP (/web)  
   a. Run:  
      ```
      npx create-next-app web --use-npm --js
      cd web
      npm install @mui/material @emotion/react @emotion/styled next-auth @next-auth/google
      ```  
   b. Create `.env.local` in `/web` with:  
      ```
      GOOGLE_ID=<your-google-client-id>
      GOOGLE_SECRET=<your-google-client-secret>
      NEXTAUTH_SECRET=<random-32-byte-hex>
      NEXTAUTH_URL=http://localhost:3000
      ```  
   c. Create `/web/pages/api/auth/[...nextauth].js` with:  
      - import NextAuth and GoogleProvider  
      - export default NextAuth({ providers: [ GoogleProvider({ clientId: process.env.GOOGLE_ID, clientSecret: process.env.GOOGLE_SECRET }) ], secret: process.env.NEXTAUTH_SECRET, pages: { signIn: '/' }, });  
   d. Add `/web/data/quotes.json` containing 24 entries keyed `"0"` to `"23"` with motivational quote strings.  
   e. In `/web/pages/index.js`:  
      - import `useSession`, `signIn`, `signOut` from `next-auth/react` and MUI components.  
      - If no session, render a MUI `<Button onClick={() => signIn('google')}>Sign in with Google</Button>`.  
      - If session, get the current hour via `new Date().getHours()`, lookup the quote in `/data/quotes.json`, and render it inside a MUI `<Card>`.  
   f. Ensure `npm run dev` serves on http://localhost:3000.

---  
2. SETUP EXPO BARE APP (/mobile)  
   a. Run:  
      ```
      cd ..
      expo init mobile --template bare-minimum
      cd mobile
      npm install react-native-webview @react-native-firebase/app @react-native-firebase/messaging
      ```  
   b. Create `/mobile/App.js` with:  
      ```jsx
      import React, { useEffect } from 'react';
      import { Alert } from 'react-native';
      import messaging from '@react-native-firebase/messaging';
      import { WebView } from 'react-native-webview';

      export default function App() {
        useEffect(() => {
          messaging().requestPermission();
          messaging().getToken().then(token => console.log('FCM Token:', token));
          const unsubscribe = messaging().onMessage(async remoteMessage => {
            Alert.alert('Quote Notification', remoteMessage.notification.body);
          });
          return unsubscribe;
        }, []);

        return <WebView source={{ uri: 'http://10.0.2.2:3000' }} style={{ flex: 1 }} />;
      }
      ```  
   c. Show where to place `google-services.json` in `/mobile/android/app/google-services.json`.  
   d. In `/mobile/android/build.gradle`, under `dependencies` add:  
      ```gradle
      classpath 'com.google.gms:google-services:4.3.15'
      ```  
   e. In `/mobile/android/app/build.gradle`, at the bottom add:  
      ```gradle
      apply plugin: 'com.google.gms.google-services'
      ```

---  
3. FINAL RUN COMMANDS  
   - To start the web app:  
     ```
     cd web
     npm install
     npm run dev
     ```  
   - To run the Android app against your local server:  
     ```
     cd ../mobile
     npm install
     expo run:android
     ```

Generate all files and folders exactly as specified, with comments marking where to insert Google OAuth credentials and where to drop the Firebase `google-services.json`. End with the two run commands above.
